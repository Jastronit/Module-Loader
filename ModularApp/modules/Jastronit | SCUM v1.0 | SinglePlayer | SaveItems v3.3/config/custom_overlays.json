# filepath: /home/jastronit/Plocha/python/SCUM/ModularApp/modules/Jastronit | SCUM v1.0 | SinglePlayer | SaveItems v3.3/widgets/custom_overlays.py
import os
import json
from PySide6.QtWidgets import (
    QWidget, QVBoxLayout, QPushButton, QLabel, QListWidget, QHBoxLayout, QSpinBox
)
from PySide6.QtCore import Qt

def create_widget(BaseClass, module_name):
    class CustomOverlaysWidget(BaseClass):
        def __init__(self):
            super().__init__(module_name)
            layout = QVBoxLayout(self)
            self.setLayout(layout)

            # --- Overlay list ---
            layout.addWidget(QLabel("Custom Overlays:"))
            self.overlay_list = QListWidget()
            layout.addWidget(self.overlay_list)
            self.load_custom_overlays()

            # --- Background color settings ---
            layout.addWidget(QLabel("Background Color:"))
            self.spin_r = QSpinBox(); self.spin_r.setRange(0, 255); self.spin_r.setValue(0)
            self.spin_g = QSpinBox(); self.spin_g.setRange(0, 255); self.spin_g.setValue(0)
            self.spin_b = QSpinBox(); self.spin_b.setRange(0, 255); self.spin_b.setValue(0)
            self.spin_a = QSpinBox(); self.spin_a.setRange(0, 255); self.spin_a.setValue(127)
            color_layout = QHBoxLayout()
            color_layout.addWidget(QLabel("R:")); color_layout.addWidget(self.spin_r)
            color_layout.addWidget(QLabel("G:")); color_layout.addWidget(self.spin_g)
            color_layout.addWidget(QLabel("B:")); color_layout.addWidget(self.spin_b)
            color_layout.addWidget(QLabel("A:")); color_layout.addWidget(self.spin_a)
            layout.addLayout(color_layout)

            # --- Buttons ---
            btn_create = QPushButton("Create Overlay")
            btn_create.clicked.connect(self.create_overlay)
            layout.addWidget(btn_create)

            btn_delete = QPushButton("Delete Overlay")
            btn_delete.clicked.connect(self.delete_selected_overlay)
            layout.addWidget(btn_delete)

            self.selected_overlay = None

        def load_custom_overlays(self):
            config_path = os.path.join("modules", self.module_name, "config", "custom_overlays.json")
            if os.path.exists(config_path):
                with open(config_path, "r") as f:
                    overlays = json.load(f)
                    for overlay in overlays:
                        self.overlay_list.addItem(overlay)

        def create_overlay(self):
            overlay_name = f"CustomOverlay_{os.urandom(4).hex()}"
            overlay_data = {
                "name": overlay_name,
                "bg": f"rgba({self.spin_r.value()},{self.spin_g.value()},{self.spin_b.value()},{self.spin_a.value()})"
            }
            self.save_overlay(overlay_data)
            self.overlay_list.addItem(overlay_name)

        def save_overlay(self, overlay_data):
            config_path = os.path.join("modules", self.module_name, "config", "custom_overlays.json")
            overlays = {}
            if os.path.exists(config_path):
                with open(config_path, "r") as f:
                    overlays = json.load(f)
            overlays[overlay_data["name"]] = overlay_data
            with open(config_path, "w") as f:
                json.dump(overlays, f, indent=2)

        def delete_selected_overlay(self):
            selected = self.overlay_list.currentItem()
            if selected:
                overlay_name = selected.text()
                config_path = os.path.join("modules", self.module_name, "config", "custom_overlays.json")
                if os.path.exists(config_path):
                    with open(config_path, "r") as f:
                        overlays = json.load(f)
                    if overlay_name in overlays:
                        del overlays[overlay_name]
                        with open(config_path, "w") as f:
                            json.dump(overlays, f, indent=2)
                        self.overlay_list.takeItem(self.overlay_list.row(selected))

    return CustomOverlaysWidget()

def get_widget_dock_position():
    return Qt.RightDockWidgetArea, 1